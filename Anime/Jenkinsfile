pipeline {
    agent any

    environment {
        DOCKER_REGISTRY_CREDENTIALS = 'DockerHubCred'
        DOCKER_IMAGE_NAME = 'hariprasad0023/spe_backend'

        MYSQL_ROOT_PASSWORD = 'NewPassword'
        MYSQL_DATABASE = 'anime_db'
        MYSQL_USER = 'hari'
        MYSQL_PASSWORD = 'Pin.Pen$20'
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/HariPrasad0023/Anime-Review-System.git']]
                ])
            }
        }

        stage('Start MySQL Container') {
                    steps {
                        script {
                            docker.image('mysql:8.0').withRun("-e MYSQL_ROOT_PASSWORD=${env.MYSQL_ROOT_PASSWORD} -e MYSQL_DATABASE=${env.MYSQL_DATABASE} -e MYSQL_USER=${env.MYSQL_USER} -e MYSQL_PASSWORD=${env.MYSQL_PASSWORD} -p 3306:3306 --name mysql-container") { c ->
                                env.DB_CONTAINER_ID = c.id
                                // Wait for MySQL to be ready
                                sh 'echo "Waiting for MySQL to start..."; sleep 30'
                            }
                        }
                    }
                }

        stage('Build') {
            steps {
                dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    sh 'mvn test'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    script {
                        docker.build("${DOCKER_IMAGE_NAME}", '.')
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
            dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    script {
                        docker.withRegistry('', 'DockerHubCred') {
                            sh "docker tag ${DOCKER_IMAGE_NAME}:latest ${DOCKER_IMAGE_NAME}:latest"
                            sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                        }
                    }
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    script {
                        ansiblePlaybook(
                            playbook: 'ansibledeploy/deploy.yml',
                            inventory: 'ansibledeploy/inventory'
                        )
                    }
                }
            }
        }

        stage('Cleanup MySQL Container') {
            steps {
                script {
                    sh "docker stop ${env.DB_CONTAINER_ID}"
                    sh "docker rm ${env.DB_CONTAINER_ID}"
                }
            }
        }
    }
}