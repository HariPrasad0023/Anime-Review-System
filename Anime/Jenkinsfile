pipeline {
    agent any

    environment {
        DOCKER_REGISTRY_CREDENTIALS = 'DockerHubCred'
        DOCKER_IMAGE_NAME = 'hariprasad0023/spe_backend'
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/HariPrasad0023/Anime-Review-System.git']]
                ])
            }
        }

        stages {
            stage('Test MySQL Connectivity') {
                steps {
                    script {
                        def mysqlHost = 'localhost' // Update this with your MySQL host
                        def mysqlPort = '3306' // Update this with your MySQL port
                        def mysqlUser = 'hari' // Update this with your MySQL username
                        def mysqlPassword = 'your_password' // Update this with your MySQL password

                        def mysqlCommand = "mysql -h ${mysqlHost} -P ${mysqlPort} -u ${mysqlUser} -p${mysqlPassword} -e 'SELECT 1'"

                        def mysqlOutput = sh(script: mysqlCommand, returnStdout: true).trim()

                        if (mysqlOutput.contains('1')) {
                            echo "MySQL connectivity test successful!"
                        } else {
                            error "Failed to connect to MySQL server"
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    sh 'mvn test'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    script {
                        docker.build("${DOCKER_IMAGE_NAME}", '.')
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
            dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    script {
                        docker.withRegistry('', 'DockerHubCred') {
                            sh "docker tag ${DOCKER_IMAGE_NAME}:latest ${DOCKER_IMAGE_NAME}:latest"
                            sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                        }
                    }
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                dir('/var/lib/jenkins/workspace/AnimeReview/Anime') {
                    script {
                        ansiblePlaybook(
                            playbook: 'ansibledeploy/deploy.yml',
                            inventory: 'ansibledeploy/inventory'
                        )
                    }
                }
            }
        }
    }
}